#!/usr/bin/python

import os
import grp
import pwd
import sys
import stat
import fcntl
import popen2
import select
import tarfile
import cStringIO

if sys.version_info[0] <= 2 and sys.version_info[1] <= 2:
    print "GIP diagnostic tool not compatible with Python 2.2 or lower."
    sys.exit(1)

import optparse

class OutputManager:

    def __init__(self):
        self.strings = {}
        self.files = []

    def add_output(self, name, output):
        self.strings[name] = output

    def add_file(self, filename):
        if os.path.exists(filename):
            self.files.append()

    def write_output(self, fd):
        tf = tarfile.open(fileobj=fd, mode="w:bz2", name="gip.tar.bz2")
        try:
            for file in self.files:
                tf.add(file)
            for filename, string in self.strings.items():
                fd_str = cStringIO.StringIO(string)
                fd_str.seek(0)
                ti = tarfile.TarInfo()
                ti.size = len(string)
                ti.name = filename
                ti.type = tarfile.REGTYPE
                tf.addfile(ti, fd_str)
            tf.close()
        except Exception, e:
            raise
            print >> sys.stderr, e
            return ""

def parse_args():
    parser = optparse.OptionParser()
    parser.add_option("-f", "--file", dest="filename",
        default="gip_diagnostic.tar.bz2")
    parser.add_option("-q", "--quiet", dest="talk", action='store_false',
        default=True)
    parser.add_option("-r", "--remote", dest="endpoint")

    opts, args = parser.parse_args()
    return opts

def cp_get(cp, section, option, default):
    """
    Helper function for ConfigParser objects which allows setting the default.

    ConfigParser objects throw an exception if one tries to access an option
    which does not exist; this catches the exception and returns the default
    value instead.

    @param cp: ConfigParser object
    @param section: Section of config parser to read
    @param option: Option in section to retrieve
    @param default: Default value if the section/option is not present.
    @returns: Value stored in CP for section/option, or default if it is not
        present.
    """
    try:
        return cp.get(section, option)
    except:
        return default

def makeNonBlocking(fd):
    """
    _makeNonBlocking_

    Make the file descriptor provided non-blocking

    Implementation provided by CMS's ProdAgent
    """
    fl = fcntl.fcntl(fd, fcntl.F_GETFL)
    try:
        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NDELAY)
    except AttributeError:
        fcntl.fcntl(fd, fcntl.F_SETFL, fl | fcntl.FNDELAY)
    

def pull_remote(command, fdout=sys.stdout, fderr=sys.stderr):
    """
    _pull_remote_

    Run the command; write the output to file descriptor fd and echo the stderr

    Returns the exitCode
    
    """
    child = popen2.Popen3(command, 1) # capture stdout and stderr from command
    child.tochild.close()             # don't need to talk to child
    outfile = child.fromchild 
    outfd = outfile.fileno()
    errfile = child.childerr
    errfd = errfile.fileno()
    makeNonBlocking(outfd)            # don't deadlock!
    makeNonBlocking(errfd)
    outdata = errdata = ''
    outeof = erreof = 0
    while 1:
        ready = select.select([outfd,errfd],[],[]) # wait for input
        if outfd in ready[0]:
            try:
                outchunk = outfile.read()
            except Exception, ex:
                msg = "Unable to read stdout chunk... skipping"
                print msg
                outchunk = ''
	    if outchunk == '': outeof = 1
	    fdout.write(outchunk)
        if errfd in ready[0]:
            try:
                errchunk = errfile.read()
            except Exception, ex:
                msg = "Unable to read stderr chunk... skipping"
                print msg, str(ex)
                errchunk = ""
	    if errchunk == '': erreof = 1
            fderr.write(errchunk)
        if outeof and erreof: break
        select.select([],[],[],.1) # give a little time for buffers to fill
        
    err = child.wait()
    if os.WIFEXITED(err):
        return os.WEXITSTATUS(err)
    elif os.WIFSIGNALED(err):
        return os.WTERMSIG(err)
    elif os.WIFSTOPPED(err):
        return os.WSTOPSIG(err)
    return err

def local_script_path():
    script_name = sys.argv[0]
    abs_path = os.path.join(sys.path[0], script_name)
    return abs_path

def gip_check_env():
    """
    Check environment for $GIP_LOCATION or $VDT_LOCATION
    """
    output = "Checking for $GIP_LOCATION... "
    if 'GIP_LOCATION' in os.environ:
        output += "OK\n"
        return output
    else:
        if 'VDT_LOCATION' in os.environ:
            output += "Assuming to be $VDT_LOCATION/gip; OK\n"
            os.environ['GIP_LOCATION']  = os.path.join(\
                os.environ['VDT_LOCATION'], 'gip')
            output += "OK\n"
            return output
        else:
            output += "FAIL\n"
            output += "GIP_LOCATION and VDT_LOCATION not set.\n"
            return output

def gip_check_config():
    """
    Check that GIP can read in config.
    """
    output = 'Checking configuration can be loaded... '
    if 'GIP_LOCATION' not in os.environ:
        output += "FAIL: $GIP_LOCATION missing."
        return output
    gip_loc = os.environ['GIP_LOCATION']
    inc = os.path.join(gip_loc, 'lib', 'python')
    if inc not in sys.path:
        sys.path.append(inc)
    try:
        gip_common = __import__('gip_common')
    except Exception, e:
        print >> sys.stderr, str(e)
        output += "FAIL: Unable to import gip_common"
        return output
    try:
        cp = gip_common.config()
    except Exception, e:
        print >> sys.stderr, str(e)
        output += "FAIL: Unable to generate config file."
        return output, None
    contents = cStringIO.StringIO()
    output += "OK\n"
    gip_common.configContents(cp, stream=contents)
    output += contents.getvalue()
    return output, cp

def can_read(file, user='daemon'):
    pw = pwd.getpwnam(user)
    st = os.stat(file)
    uid = pw.pw_uid
    if (st.st_mode & stat.S_IRUSR == stat.S_IRUSR) and (uid == st.st_uid):
        return True
    elif st.st_mode & stat.S_IROTH == stat.S_IROTH:
        return True
    elif st.st_mode & stat.S_IRGRP == stat.S_IRGRP:
        groups = grp.getgrall()
        for group in groups:
            if user in group.gr_mem:
                return True
    return False

def can_write(file, user='daemon'):
    pw = pwd.getpwnam(user)
    st = os.stat(file)
    uid = pw.pw_uid
    if (st.st_mode & stat.S_IWUSR == stat.S_IWUSR) and (uid == st.st_uid):
        return True
    elif st.st_mode & stat.S_IWOTH == stat.S_IWOTH:
        return True
    elif st.st_mode & stat.S_IWGRP == stat.S_IWGRP:
        groups = grp.getgrall()
        for group in groups:
            if user in group.gr_mem:
                return True
    return False

def gip_check_perms(cp):
    """
    Check permissions on the log files (should be writeable by daemon).
    Check permissions on the tmp directory.
    """
    output = "File system checks:\n"
    temp_dir = os.path.expandvars(cp_get(cp, "gip", "temp_dir", \
        "$GIP_LOCATION/var/tmp"))
    if os.path.exists(temp_dir):
        if can_read(temp_dir):
            output += "Temporary directory %s exists and can be read.\n" % \
                temp_dir
        else:
            output += "FAILURE: Temporary directory %s cannot be read.\n" % \
                temp_dir
        if can_write(temp_dir):
            output += "Temporary directory %s exists and can be written into" \
                " by daemon.\n" % temp_dir
        else:
            output += "FAILURE: Temporary directory %s cannot be written into" \
                " by daemon .\n" % temp_dir
    else:
        output += "Temporary directory does not exist.\n"
        return output

    log_dir = os.path.expandvars("$GIP_LOCATION/var/logs")
    gip_log = os.path.join(log_dir, "gip.log")
    modules_log = os.path.join(log_dir, "modules.log")
    if can_write(log_dir):
        output += "OK: User daemon can write into log directory %s.\n" % log_dir
    if os.path.exists(gip_log):
        output += "OK: GIP log file %s exists.\n" % gip_log
        if can_write(gip_log):
            output += "OK: Daemon can write into GIP log file.\n"
        else:
            output += "FAILURE: daemon cannot write into GIP log file.\n"
    else:
        output += "WARNING: GIP log file %s does not exist.\n % gip_log"
    if os.path.exists(modules_log):
        output += "OK: Modules log file %s exists.\n" % modules_log
        if can_write(modules_log):
            output += "OK: daemon can write into modules log.\n"
        else:
            output += "FAILURE: daemon cannot write into modules log.\n"
    else:
        output += "WARNING: Modules log file %s does not exist.\n" % modules_log

    # Check all our config files (if they exist)
    add_attributes = os.path.expandvars(cp_get(cp, "gip", \
        "add_attributes", "$GIP_LOCATION/etc/add-attributes.conf"))
    alter_attributes = os.path.expandvars(cp_get(cp, "gip", \
        "alter_attributes", "$GIP_LOCATION/etc/alter-attributes.conf"))
    remove_attributes = os.path.expandvars(cp_get(cp, "gip", \
        "remove_attributes", "$GIP_LOCATION/etc/remove-attributes.conf"))
    if os.path.exists(add_attributes):
        output += "OK: Add attributes file %s exists.\n" % add_attributes
        if not can_read(add_attributes):
            output += "FAILURE: daemon cannot read add attrs file.\n"
    if os.path.exists(alter_attributes):
        output += "OK: Alter attrs file %s exists.\n" % alter_attribtues
        if not can_read(alter_attributes):
            output += "FAILURE: daemon cannot read alterattrs file.\n"
    if os.path.exists(remove_attributes):
        output += "OK: Remove attrs file %s exists.\n" % remove_attributes
        if not can_read(remove_attributes):
            output += "FAILURE: daemon cannot read remove attrs file.\n"

    return output

def gip_check_temp(cp, outh):
    """
    List the contents of the GIP temp directory.
    Add each file present to the output handler.
    """
    temp_dir = os.path.expandvars(cp_get(cp, "gip", "temp_dir", \
        "$GIP_LOCATION/var/tmp"))
    if not os.path.exists(temp_dir):
        return "FAILURE: Temp directory does not exist!"
    fd = os.popen("ls -lh %s" % temp_dir)
    output = "Contents of temp directory:\n%s" % fd.read()
    if fd.close():
        output += "`ls` operation returned non-zero exit code"
    try:
        for file in os.listdir(temp_dir):
            outh.add_file(os.path.join(temp_dir, file))
    finally:
        return output

def main():
    opts = parse_args()

    if opts.endpoint:
        script_path = local_script_path
        if not os.path.exists(script_path):
            if opts.talk:
                print "Could not detect script's path for remote execution."
            sys.exit(1)
        endpoint = opts.endpoint
        if endpoint.find(':/jobmanager') < 0:
            endpoint += ':/jobmanager-fork'
        if not opts.file:
            opts.file = 'gip_diagnostic.tgz'
        cmd = 'globus-job-run -stdout %s %s -s %s -q --file /dev/stdout' % \
            (opts.file, endpoint, script_path)
        exit_code = pull_remote(cmd)
        sys.exit(exit_code)

    out_handler = OutputManager()

    output = gip_check_env()
    output += '\n'
    out, cp = gip_check_config()
    output += out
    if cp == None:
        print 
    output += '\n'
    output += gip_check_perms(cp)
    output += '\n'
    output += gip_check_temp(cp, out_handler)
    output += '\n'

    if opts.talk:
        print output
    out_handler.add_output("test_results.txt", output)

    out_handler.write_output(open(opts.filename, "w"))

if __name__ == '__main__':
    main()

