#!/usr/bin/env python

"""
Configuration script for the dCache information provider
"""

import os
import pwd
import sys
import socket

if 'GIP_LOCATION' not in os.environ:
    if 'VDT_LOCATION' not in os.environ:
        print >> sys.stderr, "GIP_LOCATION and VDT_LOCATION are not set!"
        sys.exit(1)
    os.environ['GIP_LOCATION'] = os.path.expandvars('$VDT_LOCATION/gip')

sys.path.append(os.path.expandvars("$GIP_LOCATION/lib/python"))
from gip_common import config, getOsgAttributes, cp_get
from gip_storage import connect_admin, connect
from user_input import *

q = GipQuestions()

def config_admin_interface(ask):
    """
    Get the parameters for the admin interface, then test the connection.
    """
    print q.admin_start
    ask(q.admin_host, "dcache_admin", "hostname", validHostname)
    ask(q.admin_port, "dcache_admin", "port", validPort)
    ask(q.admin_user, "dcache_admin", "username")
    ask.password(q.admin_password, "dcache_admin", "password")
    if not ask.cp.has_option("dcache_admin", "cipher"):
        ask.cp.set("dcache_admin", "cipher", "blowfish")
    print q.admin_test
    try:
        connect_admin(ask.cp)
        print q.admin_success
    except:
        cp = ask.cp
        cmd = "ssh -l %s -c %s -p %s %s" % (cp.get("dcache_admin", "username"),
            cp.get("dcache_admin", "cipher"),
            cp.get("dcache_admin", "port"),
            cp.get("dcache_admin", "hostname"))
        if ask(q.admin_failure % cmd, None, None, makeBoolean):
            return config_admin_interface(ask)

def config_postgres(ask):
    print q.db_start
    ask(q.db_host, "dcache_config", "pghost", validHostname)
    ask(q.db_port, "dcache_config", "pgport", validPort)
    ask(q.db_db, "dcache_config", "database")
    ask(q.db_user, "dcache_config", "dbuser")
    ask.password(q.db_passwd, "dcache_config", "dbpasswd") 
    try:
        ask.cp.set("dcache_config", "min_lifetime", "3600")
    except:
        #TODO: Log exception
        pass
    print q.db_test
    try:
        connect(ask.cp)
        print q.db_success
    except:
        cp = ask.cp
        cmd = "psql -U %s -h %s -p %s -W %s" % (cp.get("dcache_config", 
            "dbuser"),
            cp.get("dcache_config", "pghost"),
            cp.get("dcache_config", "pgport"),
            cp.get("dcache_config", "database"))
        if ask(q.db_failure % cmd, None, None, makeBoolean):
            return config_postgres(ask)


def config_dcache(ask):
    """
    Configure the dCache information provider.
    """
    if not ask(q.explain_dynamic, None, None, makeBoolean):
        return
    config_admin_interface(ask)
    config_postgres(ask)

def do_save(ask, cp, question=q.save_progress_done):
    if ask(question, None, None, makeBoolean):
        sections = list(cp.sections())
        save_sections = ['dcache_config', 'dcache_admin']
        for section in sections:
            if section not in save_sections:
                cp.remove_section(section)
        try:
            uid = pwd.getpwnam('daemon')[2]
        except:
            uid = 1
        save(cp, filename='dcache_storage.conf', mode=0600, uid=uid)
        print q.post_save % 'dcache_storage.conf'

def set_default(cp, section, option, new_val):
    if not cp.has_section(section):
        cp.add_section(section)
    if (not cp.has_option(section, option)):
        cp.set(section, option, new_val)

def main():
    cp = config('$GIP_LOCATION/etc/dcache_storage.conf')
    set_default(cp, 'dcache_admin', 'port', '22223')
    set_default(cp, 'dcache_admin', 'username', 'admin')
    set_default(cp, 'dcache_admin', 'password', 'dickerelch')
    set_default(cp, 'dcache_admin', 'cipher', 'blowfish')
    set_default(cp, 'dcache_config', 'pgport', '5432')
    set_default(cp, 'dcache_config', 'database', 'dcache')
    set_default(cp, 'dcache_config', 'dbuser', 'srmdcache')
    set_default(cp, 'dcache_config', 'dbpasswd', 'srmdcache')

    ask = InputHandler(cp)
    try:
        config_dcache(ask)
    except:
        do_save(ask, cp, question=q.save_progress)
        sys.exit(1)
    do_save(ask, cp)

if __name__ == '__main__':
    main()

