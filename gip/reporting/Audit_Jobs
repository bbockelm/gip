#!/usr/bin/env python

import re
import sys
import os

sys.path.insert(0, os.path.expandvars("$GIP_LOCATION/lib/python"))
import GipUnittest
from gip_ldap import read_ldap
from gip_common import cp_get, getUrlFd
from gip_testing import runTest, getTestConfig

class AuditJobs(GipUnittest.GipTestCase):
    def __init__(self, site, cp):
        GipUnittest.GipTestCase.__init__(self, 'testJobs', 'testJobs_%s' % site, cp)
        self.site = site

    def testJobs(self):
        """
Audit Jobs

This is a report that displays the following information:
        * Computing Element / Queue
        * Stanza Source
        * State Waiting Jobs
        * State Running Jobs
        * State Total Jobs
        * State Free Job Slots
        """
        results = self.getJobInfo()
        output = self.format_results(results)
        self.expectTrue(False, output)

    def getJobInfo(self):
        results_list = []

        url = cp_get(self.cp, "gip_tests", "schema_check_url", "") % self.site
        entries = read_ldap(getUrlFd(url))
        for entry in entries:
            entry_details = {}
            dn = list(entry.dn)
            if dn[0].split("=")[0] == 'GlueCEUniqueID':
                entry_details["source"] = 'GlueCEUniqueID'
                entry_details["ce"] = dn[0].split("=")[1]
            elif dn[0].split("=")[0] == 'GlueVOViewLocalID':
                entry_details["source"] = 'GlueVOViewLocalID'
                entry_details["ce"] = dn[1].split("=")[1]
            else:
                continue

            entry_details["CEStateWaitingJobs"] = entry.glue["CEStateWaitingJobs"]
            entry_details["CEStateRunningJobs"] = entry.glue["CEStateRunningJobs"]
            entry_details["CEStateTotalJobs"] = entry.glue["CEStateTotalJobs"]
            entry_details["CEStateFreeJobSlots"] = entry.glue["CEStateFreeJobSlots"]
            results_list.append(entry_details)

        return results_list

    def format_results(self, results):
        output = "\n"
        template = "%(ce)-50s\t%(source)-20s\t%(CEStateWaitingJobs)-13s\t%(CEStateRunningJobs)-13s\t%(CEStateTotalJobs)-13s\t%(CEStateFreeJobSlots)-13s\n"
        header = {"ce":"CE", \
                  "source":"Source", \
                  "CEStateWaitingJobs":"Waiting Jobs", \
                  "CEStateRunningJobs":"Running Jobs", \
                  "CEStateTotalJobs":"Total Jobs", \
                  "CEStateFreeJobSlots":"Free JobSlots"}
        output += template % header
        for each in results:
            output += template % each
        return output

def main(args):
    cp = getTestConfig(args)
    runTest(cp, AuditJobs)

if __name__ == '__main__':
    main(sys.argv)
