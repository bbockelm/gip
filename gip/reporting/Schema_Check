#!/usr/bin/env python
import os
import sys
import tempfile
import urllib2
import datetime

sys.path.insert(0, os.path.expandvars("$GIP_LOCATION/lib/python"))
import GipUnittest
from gip_ldap import read_ldap, query_bdii, getSiteList
from gip_common import config, addToPath
from gip_testing import runTest, getTestConfig

slap_conf = """
include     /etc/openldap/schema/core.schema
include     $GIP_LOCATION/../schema/Glue-CORE.schema
include     $GIP_LOCATION/../schema/Glue-CE.schema
include     $GIP_LOCATION/../schema/Glue-CESEBind.schema
include     $GIP_LOCATION/../schema/Glue-SE.schema

database    bdb
suffix      "o=Grid"
"""

def getTempFilename():
    try:
        conffile = tempfile.NamedTemporaryFile()
        conffile = conffile.name
    except:
        conffile = tempfile.mktemp()
    return conffile

def createSlapConf():
    conffile = getTempFilename()
    fp = open(conffile, 'w')
    fp.write(os.path.expandvars(slap_conf))
    return conffile

slap_cmd = "slapadd -u -c -f %(slap_conf)s -l %(slap_info)s"

def makeSafe(site):
    return site.replace('-', '_')


class TestSchema(GipUnittest.GipTestCase):
    def __init__(self, site, cp):
        GipUnittest.GipTestCase.__init__(self, 'testSchema')
        self.site = site
        self.name = 'testSchema_%s' % site
        self.slap_conf = createSlapConf()
        
    def testSchema(self):
        """
Test schema of site
        """
        url = self.cp.get('test', 'goc') % self.site
        fqdn = getFQDNBySiteName(self.cp, self.site)
        url = self.cp.get("gip_tests", "schema_check_url") % (fqdn, self.site)
        info_file = getTempFilename()
        fp2 = open(info_file, 'w')
        fp = urllib2.urlopen(url)
        ctr = 0
        for line in fp:
            ctr += 1
            if ctr < 3:
                self.failUnless(line.find("Error Message") < 0, msg="Site %s not serving with CEMon." % self.site)
            fp2.write(line)
        fp2.close()
        stdin, fp3 = os.popen4(slap_cmd % {'slap_conf': self.slap_conf, 'slap_info': info_file})
        stdin.close()
        output = fp3.read()
        self.assertEquals(len(output), 0, msg="slapadd schema check failed for site %s.  Output:\n%s" % (self.site, output))

def main(args):

    addToPath("/usr/sbin")
    cp = getTestConfig(args)
    runTest(cp, TestSchema)

if __name__ == '__main__':
    main(sys.argv)
