#!/usr/bin/env python

import re
import sys
import os

sys.path.insert(0, os.path.expandvars("$GIP_LOCATION/lib/python"))
import GipUnittest
from gip_testing import runTest, getTestConfig, runCommand
from gip_common import cp_get

class TestSdQuery(GipUnittest.GipTestCase):
    def __init__(self, cp):
        GipUnittest.GipTestCase.__init__(self, 'testSdQuery')
        self.sitedns = [i.strip() for i in cp_get(self.cp, "gip_tests", "site_dns", "").split(',')]
        self.name = 'testSdQuery'

    def runquery(self):
        cern_bdii = "%s:%s" % (cp_get(self.cp, "gip_tests", "egee_bdii", "lcg-bdii.cern.ch"), cp_get(self.cp, "gip_tests", "egee_port", 2170))
        command = "/bin/bash -c 'export LCG_GFAL_INFOSYS=%s; glite-sd-query -e -t srm'" % cern_bdii
        return runCommand(command)

    def concatoutput(self, pout):
        output = ''
        for l in pout:
            if l == '':
                output = output + ' '
            output = output + l + ' '

        return output

    def testSdQuery(self):
        """
SD Query

glite-sd-query -e -t srm
        """
        pout = self.runquery()
        output = self.concatoutput(pout)

        for site in self.sitedns:
            re_site = re.compile('([\s\S]*)' + site + '([\s\S]*)')
            m = re_site.match(output)
            if m:
                self.expectTrue(False, msg="%s Passes" % site)
            else:
                self.expectTrue(False, msg="%s Fails" % site, critical=True)

def main(args):

    cp = getTestConfig(args)
    runTest(cp, TestSdQuery, per_site=False)

if __name__ == '__main__':
    main(sys.argv)

