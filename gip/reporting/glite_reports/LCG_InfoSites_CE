#!/usr/bin/env python

import re
import sys
import os

sys.path.insert(0, os.path.expandvars("$GIP_LOCATION/lib/python"))
import GipUnittest
from gip_common import getLogger, cp_get, voList
from gip_testing import runTest, getTestConfig, runlcginfosites


class LcgInfoSitesCE(GipUnittest.GipTestCase):
    def __init__(self, cp):
        GipUnittest.GipTestCase.__init__(self, 'testLcgInfoSitesCE')
        self.bdii = cp_get(self.cp, "gip_tests", "bdii_addr", "")
        self.opts = ['ce']
        self.name = 'testLcgInfoSitesCE'

    def testLcgInfoSitesCE(self):
        """
LCG InfoSites Query

lcg-infosites --is is.grid.iu.edu --vo ops ce

Checks CE, # CPU's, Free, Running Jobs, Waiting Jobs, Total Jobs for the
following vo's:  MIS, OPS, CMS, and ATLAS.  NOTE: This test is not
really intended for a site adminitstrators other than to see if their
site's CE is configured properly and is visible to VO's using the lcg
tools.
        """
        vo_sep = ""
        for i in range(0, 70): vo_sep += "="
        vos = ['mis', 'ops', 'cms', 'atlas']
        for vo in vos:
            output = "VO: %s\n" % vo
            output += vo_sep
            output += self.getInfoForVO(vo)
            self.expectTrue(False, output)

    def getInfoForVO(self, vo):
        pout = runlcginfosites(self.bdii, vo, self.opts).readlines()

        pout.pop(0) # Pop Some stupid comment about bdii
        pout.pop(0) # Pop the header
        pout.pop(0) # Pop the separator line

        results = []
        for line in pout:
            items = line.split()
            record = {"cpus" : items[0], "free" : items[1], "total" : items[2], "running" : items[3], "waiting" : items[4], "ce" : items[5]}
            results.append(record)

        return self.format_results(results)

    def format_results(self, results):
        output = "\n"
        template = "%(ce)-56s\t%(cpus)-5s\t%(free)-15s\t%(waiting)-15s\t%(running)-15s\t%(total)-15s\n"
        header = {"cpus" : "CPU's", \
                  "free" : "Free", \
                  "total" : "Total Jobs",
                  "running" : "Running Jobs",
                  "waiting" : "Waiting jobs",
                  "ce" : "CE"}
        output += template % header
        for each in results:
            output += template % each
        return output

def main(args):
    cp = getTestConfig(args)
    runTest(cp, LcgInfoSitesCE, per_site=False)

if __name__ == '__main__':
    main(sys.argv)
