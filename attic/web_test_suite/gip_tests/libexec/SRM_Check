#!/usr/bin/env python

import os
import sys
import tempfile
import re
import urlparse
import datetime

from gip_ldap import read_bdii
from test_common import getConfig

class TestSrmAds:
    def __init__(self, base_path):
        self.cp = getConfig(base_path)
        self.fk_re = re.compile("GlueSiteUniqueID=(.*)")
        self.sites_list = self.get_sites()
        self.valid_versions = self.get_valid_versions()
        self.deprecated_versions = self.get_deprecated_versions()
        self.msgs = []
        self.colorize = 1

    def get_valid_versions(self):
        ver = self.cp.get("SRM_Check", "valid_versions")
        ver = [i.strip() for i in ver.split(',')]
        return ver

    def get_deprecated_versions(self):
        ver = self.cp.get("SRM_Check", "deprecated_versions")
        ver = [i.strip() for i in ver.split(',')]
        return ver

    def get_sites(self):
        sites = self.cp.get("gip", "site_names")
        sites = [i.strip() for i in sites.split(',')]
        return sites

    def main(self):
        html = self.getTitle()
        for s in self.sites_list:
            try:
                self.testSrmAds(s)
                html += self.formatResults(s)
                self.msgs = []
            except:
                self.msgs.append(str(sys.exc_info()[0]) + ": " + str(sys.exc_info()[1]))
                html += self.formatResults(s)
                self.msgs = []
        return html

    def testSrmAds(self, site):
        entries = read_bdii(self.cp, base="mds-vo-name=%s,mds-vo-name=local,o=grid" % site, query="(objectClass=GlueService)")
        for entry in entries:
            if entry.glue['ServiceType'].lower().find('srm') < 0:
                continue

            if entry.glue['ServiceType'] != 'SRM':
                self.msgs.append("ServiceType must be equal to 'SRM'")

            version = entry.glue['ServiceVersion']
            if not (version in self.valid_versions):
                self.msgs.append("ServiceVersion must be one of %s." % self.valid_versions)

            if version in self.deprecated_versions:
                self.msgs.append("Version string %s is deprecated." % version)

            fk = entry.glue['ForeignKey']
            m = self.fk_re.match(fk)
            if len(m.groups()[0]) <= 1:
                self.msgs.append("Foreign Key: %s is not valid." % fk)

            site_unique_id = m.groups()[0]
            if (site_unique_id != self.getSiteUniqueID(site)):
                self.msgs.append("Incorrect site unique ID for service.")

            path = self.getPath(entry.glue['ServiceEndpoint'])
            if path.startswith("/srm/managerv"):
                if version.startswith('2'):
                    if path != "/srm/managerv2":
                        self.msgs.append("Incorrect path for SRM v2 service.")
                elif version.startswith('1'):
                    if path != '/srm/managerv1':
                        self.msgs.append("Incorrect path for SRM v2 service.")

    def getSiteUniqueID(self, site):
        """
        Determine the unique ID for this site.
        """
        entries = read_bdii(self.cp, base="mds-vo-name=%s,mds-vo-name=local,o=grid" % site, query="(objectClass=GlueSite)")
        if len(entries) != 1:
            self.msgs.append("Multiple GlueSite entries for site %s." % site)
        return entries[0].glue['SiteUniqueID']

    def getPath(self, surl):
        """
        Given a SRM SURL, determine the path of the SRM endpoint
        (i.e., for dCache, this is /srm/managervX)

        parts[0] = protocol
        parts[1] = server:port
        parts[2] = path
        """
        path = 2
        surl = surl.replace("srm://", "https://").replace("httpg://", "https://")
        parts = urlparse.urlparse(surl)
        return parts[path]

    def formatResults(self, site):
        html = self.getHeader(site)
        if len(self.msgs) > 0:
            for msg in self.msgs:
                html += self.getDetail(msg)
        else:
            msg = site + " passed the SRM check."
            html += self.getDetail(msg)
        html += self.getFooter()
        return html

    def getTitle(self):
        updateDateTime = datetime.datetime.now().strftime("%A %b %d %Y %H:%M:%S")
        html = """
            <h1>SRM Check</h1>
            <h2>This check tests SRM ads for each site for the following:
                <ul>
                    <li>endpoint type is SRM</li>
                    <li>Version is 1.1 or 2.2 (1.1.0 or 2.2.0 generate warnings)</li>
                    <li>Site unique ID is not blank</li>
                    <li>Site unique ID is actual unique ID used for this site.</li>
                    <li>If dCache, make sure that the /srm/managervN string is correct.</li>
                </ul>
            </h2>
            <h2>Last Updated on: %s </h2>
        """
        return html % updateDateTime

    def getHeader(self, site):
        html = """
            <h2>Test results for %s</h2>
            <table rules='all' frame='border'>
            <tr>
                <th>DN Check Results</th>
            </tr>
        """
        return html % site

    def getDetail(self, contents):
        self.colorize = self.colorize * -1
        if (self.colorize == -1):
            html = "      <tr style='background-color:#99ccff'>"
        else:
            html = "      <tr>"

        detail = """
            <td>%s</td></tr>
        """
        return html + (detail % contents)

    def getFooter(self):
        self.colorize = 1
        return "</table>"

if __name__ == '__main__':
    s = TestSrmAds(sys.argv[1])
    print s.main()
