#!/usr/bin/env python
import unittest
import os
import sys
import tempfile
import urllib2
import datetime
from test_common import *
from gip_ldap import read_ldap, query_bdii, getSiteList

slap_conf = """
include     /etc/openldap/schema/core.schema
include     $BASE_PATH/include/schema/Glue-CORE.schema
include     $BASE_PATH/include/schema/Glue-CE.schema
include     $BASE_PATH/include/schema/Glue-CESEBind.schema
include     $BASE_PATH/include/schema/Glue-SE.schema

database    bdb
suffix      o=Grid"
"""

slap_cmd = "slapadd -u -c -d 2048 -f %(slap_conf)s -l %(slap_info)s"

class TestSchema:

    def __init__(self, base_path):
        self.cp = getConfig(base_path)
        os.environ["BASE_PATH"] = base_path
        self.colorize = 1
        self.site_list = self.get_sites()
        self.slap_conf = self.createSlapConf()

    def main(self):
        html = ""
        for site in self.site_list:
            self.colorize = self.colorize * -1

            valid = False
            header = self.getHeader(site)
            info_file = self.getTempFilename()
            fp2 = open(info_file, 'w')
            url = self.cp.get('Schema_Check', 'url') % site
            fp = getURLData(url)
            fp2.write(fp)
            fp2.close()
            stdin, fp3 = os.popen4(slap_cmd % {'slap_conf': self.slap_conf, 'slap_info': info_file})
            stdin.close()
            output = fp3.read()
            if len(output) < 1:
                valid = True
                output = "Valid ldif"
            html += header + self.getDetail(output, valid)
        html += self.getFooter()
        return html

    def get_sites(self):
        sites = self.cp.get("gip", "site_names")
        sites = [i.strip() for i in sites.split(',')]
        return sites

    def getTempFilename(self):
        try:
            conffile = tempfile.NamedTemporaryFile()
            conffile = conffile.name
        except:
            conffile = tempfile.mktemp()
        return conffile

    def createSlapConf(self):
        conffile = self.getTempFilename()
        fp = open(conffile, 'w')
        fp.write(os.path.expandvars(slap_conf))
        return conffile

    def makeSafe(self, site):
        return site.replace('-', '_')

    def getHeader(self, site):
        html = """
            <h2>%s</h2
            <table rules='all' frame='border'>
        """
        return html % site

    def getDetail(self, det, valid):
        html =  """<tr><pre>%s</pre></tr></table>"""
        return html % det

    def getFooter(self):
        return "</table>"

if __name__ == '__main__':
    t = TestSchema(sys.argv[1])
    print t.main()
