#!/usr/bin/env python

import os
import sys
import tempfile
import urllib2
import re
import urlparse
import datetime

from gip_ldap import read_bdii, prettyDN
from test_common import getConfig

class TestDnAds:
    def __init__(self, base_path):
        self.cp = getConfig(base_path)
        self.sites_list = self.get_sites()
        self.msgs = []
        self.colorize = 1

    def get_sites(self):
        sites = self.cp.get("gip", "site_names")
        sites = [i.strip() for i in sites.split(',')]
        return sites

    def main(self):
        html = self.getTitle()
        for s in self.sites_list:
            self.testDnAds(s)
            html += self.formatResults(s)
            self.msgs = []
        return html

    def testDnAds(self, site):
        entries = read_bdii(self.cp, base="mds-vo-name=%s,mds-vo-name=local,o=grid" % site)
        for entry in entries:
            dn = list(entry.dn)
            if dn.pop() != "o=grid":
                self.msgs.append("DN %s does not end with o=grid" % prettyDN(entry.dn))
            if dn.pop() != "mds-vo-name=local":
                self.msgs.append("DN %s does not end with mds-vo-name=local,o=grid" % prettyDN(entry.dn))
            if dn.pop() != "mds-vo-name=%s" % site:
                self.msgs.append("DN %s does not end with mds-vo-name=%s,mds-vo-name=local,o=grid" % (prettyDN(entry.dn), site))
            for d in dn:
                if d.find("o=grid") >= 0:
                    self.msgs.append("There is an extra o=grid entry in DN %s" % prettyDN(entry.dn))
                if not (d.startswith("mds-vo-name") == False):
                    self.msgs.append("There is an extra mds-vo-name entry in DN %s" % prettyDN(entry.dn))

    def formatResults(self, site):
        html = self.getHeader(site)
        if len(self.msgs) > 0:
            for msg in self.msgs:
                html += self.getDetail(msg)
        else:
            msg = site + " passed the DN check."
            html += self.getDetail(msg)
        html += self.getFooter()
        return html

    def getTitle(self):
        updateDateTime = datetime.datetime.now().strftime("%A %b %d %Y %H:%M:%S")
        html = """
            <h1>DN Check</h1>
            <h2>This check tests DN ads for each site for the following:
                <ul>
                    <li>o=grid appears once</li>
                    <li>mds-vo-name=local appears once</li>
                    <li>mds-vo-name=<site> appears once</li>
                    <li>they appear in the correct order</li>
                </ul>
            </h2>
            <h2>Last Updated on: %s </h2>
        """
        return html % updateDateTime

    def getHeader(self, site):
        html = """
            <h2>Test results for %s</h2>
            <table rules='all' frame='border'>
            <tr>
                <th>DN Check Results</th>
            </tr>

        """
        return html % site

    def getDetail(self, contents):
        self.colorize = self.colorize * -1
        if (self.colorize == -1):
            html = "      <tr style='background-color:#99ccff'>"
        else:
            html = "      <tr>"

        detail = """
            <td>%s</td></tr>
        """
        return html + (detail % contents)

    def getFooter(self):
        self.colorize = 1
        return "</table>"

if __name__ == '__main__':
    t = TestDnAds(sys.argv[1])
    print t.main()

